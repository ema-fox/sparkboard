AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for sparkboard-lambda

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Resources:
  SlackHandler:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./lambda
      Handler: target/main.slackHandler
      Runtime: nodejs12.x
      Timeout: 3
      MemorySize: 256
      Tracing: Active

      ## provisioned concurrency is supposed to reduce post-init cold start latency
      ## but didn't address the slow early runs I am seeing
      #      AutoPublishAlias: live
      #      ProvisionedConcurrencyConfig:
      #        ProvisionedConcurrentExecutions: 1
      Policies:
        # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - LambdaInvokePolicy:
            FunctionName: !Ref TaskHandler
      Environment:
        Variables:
          TASK_HANDLER: !Ref TaskHandler
      Events:
        GetRoot:
          Type: Api # see https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /
            Method: get
        GetAll:
          Type: Api # see https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /{any+}
            Method: get
        PostRoot:
          Type: Api
          Properties:
            Path: /
            Method: post

  # https://github.com/dsandor/example-lambda-sns/blob/master/template.yaml
  TaskHandler:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 192
      Tracing: Active
      Timeout: 20
      CodeUri: ./lambda
      Handler: target/main.deferredTaskHandler
      Runtime: nodejs12.x

  # https://stackoverflow.com/questions/61015330/how-can-i-set-the-maximumretryattempt-for-aws-lambda-in-the-cloudformation-lambd
  TaskHandlerInvokeConfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref TaskHandler
      MaximumRetryAttempts: 0 # slack UI tasks should not be retried
      Qualifier: $LATEST


Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  SlackApi:
    Description: "API Gateway endpoint URL for Slack function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"

# put shared functionality/dependencies in a layer?
# https://docs.aws.amazon.com/serverlessrepo/latest/devguide/sharing-lambda-layers.html
