name: clojure

on:
  push:
    branches:
      - master
      - release
      - gh-actions

jobs:
  compile-release:
    runs-on: ubuntu-18.04
    steps:
      - if: endsWith(github.ref, '/master') || endsWith(github.ref, '/gh-actions')
        run: |
          echo "::set-env name=STACK_NAME::sparkboard-lambda-staging"
          echo "::set-env name=SPARKBOARD_CONFIG::${{ secrets.SPARKBOARD_CONFIG_STAGING }}"
          echo "::set-env name=AWS_ACCESS_KEY_ID::${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}"
          echo "::set-env name=AWS_SECRET_ACCESS_KEY::${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}"
      - if: endsWith(github.ref, '/release')
        run: |
          echo "::set-env name=STACK_NAME::sparkboard-lambda-prod"
          echo "::set-env name=SPARKBOARD_CONFIG::${{ secrets.SPARKBOARD_CONFIG_PROD }}"
          echo "::set-env name=AWS_ACCESS_KEY_ID::${{ secrets.AWS_ACCESS_KEY_ID_PROD }}"
          echo "::set-env name=AWS_SECRET_ACCESS_KEY::${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}"
      - name: checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1

      - name: cache yarn
        id: cache-yarn
        uses: actions/cache@v1
        with:
          path: node_modules
          key: v0-yarn-${{ hashFiles('**/yarn.lock')}}

      - name: cache classpath
        uses: actions/cache@v1
        with:
          path: .cpcache
          key: v0-deps-${{ hashFiles('**/deps.edn')}}
          restore-keys: |
            v0-deps

      - name: cache maven
        uses: actions/cache@v1
        with:
          path: /home/runner/.m2
          key: v0-maven-${{ hashFiles('**/deps.edn')}}
          restore-keys: |
            v0-maven

      - name: cache shadow-cljs
        uses: actions/cache@v1
        with:
          path: .shadow-cljs
          key: v0-shadow-cljs-${{github.sha}}
          restore-keys: |
            v0-shadow-cljs

      - name: Install java
        uses: actions/setup-java@v1
        with:
          java-version: '13.0.1'

      - name: Install clojure
        uses: DeLaGuardo/setup-clojure@2.0
        with:
          tools-deps: '1.10.1.483'

      - name: Yarn
        if: steps.cache-yarn.outputs.cache-hit != 'true'
        run: yarn

      - name: Compile
        run: yarn shadow-cljs release lambda

      - name: sam build
        uses: youyo/aws-sam-action/python3.8@master
        with:
          sam_command: build

      - name: sam deploy
        uses: youyo/aws-sam-action/python3.8@master
        with:
          sam_command: deploy --no-fail-on-empty-changeset --stack-name ${{ env.STACK_NAME }} --s3-prefix ${{ env.STACK_NAME }}
