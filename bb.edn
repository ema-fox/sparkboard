{:tasks {:requires ([cheshire.core :as json]
                    [clojure.java.shell :refer [sh]])
         :init (do (def staging "sparkboard-jvm-staging")
                   (def prod "sparkboard-jvm"))
         cljs (do (shell "yarn install")
                  (shell "yarn shadow-cljs release web"))
         clj (do (shell "mkdir -p classes")
                 (shell "clojure -A:uberdeps -X:aot")
                 (shell "clojure -A:uberdeps -X:uberjar"))
         build (do (run 'cljs)
                   (run 'clj))
         deploy (shell (str "flyctl deploy -a " staging))
         deploy:ci (shell (str "flyctl deploy -a " staging " --remote-only"))
         promote (let [{:strs [Registry Repository Tag]} (-> (shell {:out :string}
                                                               (str "flyctl image show -a " staging " --json"))
                                                           :out
                                                           json/parse-string)
                       image (str Registry "/" Repository ":" Tag)]
                   (shell (str "flyctl deploy -a " prod " --image " image)))}}